***************
*** 65,70 ****
      $account->uid = 0;
      $account->roles = array_filter($this->config['roles']);
      $account->status = $this->config['status'];
  
      return $account;
    }
--- 65,71 ----
      $account->uid = 0;
      $account->roles = array_filter($this->config['roles']);
      $account->status = $this->config['status'];
+     $account->is_new = TRUE;
  
      return $account;
    }
***************
*** 105,110 ****
        throw new FeedsValidationException(t('User name missing or email not valid.'));
      }
  
      // Timezone validation.
      if (!empty($account->timezone) && !array_key_exists($account->timezone, system_time_zones())) {
        throw new FeedsValidationException(t("Failed importing '@name'. User's timezone is not valid.", array('@name' => $account->name)));
--- 106,126 ----
        throw new FeedsValidationException(t('User name missing or email not valid.'));
      }
  
+     // Check when an user ID gets set or changed during processing if that user
+     // ID is not already in use.
+     if (!empty($account->uid)) {
+       $is_new = !empty($account->feeds_item->is_new);
+       $different = !empty($account->feeds_item->entity_id) && $account->feeds_item->entity_id != $account->uid;
+       if ($is_new || $different) {
+         $exists = entity_load_unchanged('user', $account->uid);
+         if ($exists) {
+           throw new FeedsValidationException(t('Could not update user ID to @uid since that ID is already in use.', array(
+             '@uid' => $account->uid,
+           )));
+         }
+       }
+     }
+ 
      // Timezone validation.
      if (!empty($account->timezone) && !array_key_exists($account->timezone, system_time_zones())) {
        throw new FeedsValidationException(t("Failed importing '@name'. User's timezone is not valid.", array('@name' => $account->name)));
***************
*** 126,131 ****
        unset($edit['pass']);
      }
  
      user_save($account, $edit);
  
      // If an encrypted password was given, directly set this in the database.
--- 142,158 ----
        unset($edit['pass']);
      }
  
+     // Check if the user ID changed when updating users.
+     if (!empty($account->feeds_item->entity_id) && $account->feeds_item->entity_id != $account->uid) {
+       // The user ID of the existing user is different. Try to update the user ID.
+       db_update('users')
+         ->fields(array(
+           'uid' => $account->uid,
+         ))
+         ->condition('uid', $account->feeds_item->entity_id)
+         ->execute();
+     }
+ 
      user_save($account, $edit);
  
      // If an encrypted password was given, directly set this in the database.
***************
*** 258,263 ****
    public function getMappingTargets() {
      $targets = parent::getMappingTargets();
      $targets += array(
        'name' => array(
          'name' => t('User name'),
          'description' => t('Name of the user.'),
--- 285,295 ----
    public function getMappingTargets() {
      $targets = parent::getMappingTargets();
      $targets += array(
+       'uid' => array(
+         'name' => t('User ID'),
+         'description' => t('The uid of the user. NOTE: use this feature with care, user ids are usually assigned by Drupal.'),
+         'optional_unique' => TRUE,
+       ),
        'name' => array(
          'name' => t('User name'),
          'description' => t('Name of the user.'),
***************
*** 322,327 ****
      // target's value.
      foreach ($this->uniqueTargets($source, $result) as $target => $value) {
        switch ($target) {
          case 'name':
            $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $value))->fetchField();
            break;
--- 354,363 ----
      // target's value.
      foreach ($this->uniqueTargets($source, $result) as $target => $value) {
        switch ($target) {
+         case 'uid':
+           $uid = db_query("SELECT uid FROM {users} WHERE uid = :uid", array(':uid' => $value))->fetchField();
+           break;
+ 
          case 'name':
            $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $value))->fetchField();
            break;
